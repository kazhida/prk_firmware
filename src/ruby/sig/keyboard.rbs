# TypeProf 0.14.1

# Global variables
$mutex: bool

# Classes
class Keyboard
  GPIO_OUT: Integer
  GPIO_IN: Integer
  HI: Integer
  LO: Integer
  MOD_KEYCODE: Hash[Symbol, Integer]
  KEYCODE: Array[Symbol]
  KEYCODE_SFT: Hash[Symbol, Integer]
  LETTER: Array[String | Symbol | nil]
  KC_ALIASES: Hash[Symbol, Symbol]

  @SHIFT_LETTER_OFFSET_A: Integer
  @SHIFT_LETTER_OFFSET_UNDS: Integer
  @SHIFT_LETTER_THRESHOLD_A: Integer
  @SHIFT_LETTER_THRESHOLD_UNDS: Integer

  @before_filters: Array[^() -> void]
  @keymaps: Hash[Symbol, Array[Array[Integer | Symbol | Proc]]]
  @mode_keys: Array[{
    layer:             Symbol,
    on_release:        Integer | Array[Integer] | Proc | nil,
    on_hold:           Integer | Symbol | Proc,
    release_threshold: Integer,
    repush_threshold:  Integer,
    switch:            [Integer, Integer],
    prev_state:        Symbol,
    pushed_at:         Integer,
    released_at:       Integer
    }
    ]
  @switches: Array[Array[Integer]]
  @layer_names: Array[Symbol]
  @layer: Symbol
  @anchor: bool
  @anchor_left: bool
  @rows: Array[Integer]
  @cols: Array[Integer]
  @offset_a: Integer
  @offset_b: Integer
  @locked_layer: Symbol | nil
  @keycodes: Array[String]
  @macro_keys: Array[Integer]
  @macro_key_numbers: Array[Integer | nil]
  @modifier: Integer
  @i2c: I2C | nil
  @io_expanders: Array[IoExpander]
  @rearranger: Rearranger | nil

  attr_accessor split: bool
  attr_accessor uart_pin: Integer

  def append: (RGB | RotaryEncoder feature) -> void
  def start_features: -> void
  def uart_putc_raw : (Integer) -> void
  def uart_getc : -> Integer
  def uart_rx_init : (Integer) -> void
  def uart_tx_init : (Integer) -> void
  def report_hid : (Integer, String) -> void
  def initialize: -> void
  def layer: () -> Symbol
  def set_anchor: (Symbol val) -> void
  def init_pins: (Array[Integer] rows, Array[Integer] cols) -> void
  def init_modulo: (I2C, Integer, Array[IoExpander]) -> void
  def add_layer: (Symbol name, Array[Symbol] map) -> void
  def define_mode_key: (Symbol key_name, [Symbol | Array[Symbol] | Proc | nil, Symbol | Proc, Integer?, Integer?] param) -> void
  def invert_sft: -> void
  def before_report: () { () -> void } -> void
  def keys_include?: (Symbol) -> bool
  def action_on_release: (Integer | Array[Integer] | Proc | nil) -> void
  def action_on_hold: (Integer | Symbol | Proc) -> void
  def send_key: (Symbol) -> void
  def start!: -> void
  def raise_layer: -> void
  def lower_layer: -> void
  def lock_layer: (Symbol layer_name) -> void
  def unlock_layer: () -> void
  def macro: (String text, ?::Array[Symbol] opt) -> void
  def eval: (String) -> void
  def ruby: () -> void
end
